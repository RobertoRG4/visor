"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _compression = _interopRequireDefault(require("compression"));
var _cors = _interopRequireDefault(require("cors"));
var _express = _interopRequireDefault(require("express"));
var _lodash = _interopRequireDefault(require("lodash"));
var _auth = require("@verdaccio/auth");
var _config = require("@verdaccio/config");
var _core = require("@verdaccio/core");
var _loaders = require("@verdaccio/loaders");
var _middleware = require("@verdaccio/middleware");
var _searchIndexer = require("@verdaccio/search-indexer");
var _config2 = _interopRequireDefault(require("../lib/config"));
var _constants = require("../lib/constants");
var _logger = require("../lib/logger");
var _storage = _interopRequireDefault(require("../lib/storage"));
var _utils = require("../lib/utils");
var _debug = _interopRequireDefault(require("./debug"));
var _endpoint = _interopRequireDefault(require("./endpoint"));
var _middleware2 = require("./middleware");
var _web = _interopRequireDefault(require("./web"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const version = "6.2.1" || 'dev';
const defineAPI = async function (config, storage) {
  const auth = new _auth.Auth(config, _logger.logger, {
    legacyMergeConfigs: true
  });
  await auth.init();
  const app = (0, _express.default)();
  _searchIndexer.SearchMemoryIndexer.configureStorage(storage);
  await _searchIndexer.SearchMemoryIndexer.init(_logger.logger);
  // run in production mode by default, just in case
  // it shouldn't make any difference anyway
  app.set('env', process.env.NODE_ENV || 'production');

  // Allow `req.ip` to resolve properly when Verdaccio is behind a proxy or load-balancer
  // See: https://expressjs.com/en/guide/behind-proxies.html
  if (config.server?.trustProxy) {
    app.set('trust proxy', config.server.trustProxy);
  }
  app.use((0, _cors.default)());

  // // Router setup
  app.use((0, _middleware.log)(_logger.logger));
  app.use((0, _middleware.errorReportingMiddleware)(_logger.logger));
  if (config.user_agent) {
    app.use(function (_req, res, next) {
      res.setHeader('X-Powered-By', (0, _config.getUserAgent)(config.user_agent));
      next();
    });
  } else {
    app.disable('x-powered-by');
  }
  app.use((0, _compression.default)());
  app.get('/-/static/favicon.ico', (0, _middleware2.serveFavicon)(config));

  // Hook for tests only
  if (config._debug) {
    (0, _debug.default)(app, config.configPath);
  }
  const plugins = await (0, _loaders.asyncLoadPlugin)(config.middlewares, {
    config,
    logger: _logger.logger
  }, function (plugin) {
    return typeof plugin.register_middlewares !== 'undefined';
  }, true, config?.serverSettings?.pluginPrefix ?? 'verdaccio', _core.PLUGIN_CATEGORY.MIDDLEWARE);
  plugins.forEach(plugin => {
    plugin.register_middlewares(app, auth, storage);
  });

  // // For  npm request
  app.use((0, _endpoint.default)(config, auth, storage));

  // For WebUI & WebUI API
  if (_lodash.default.get(config, 'web.enable', true)) {
    app.use((_req, res, next) => {
      res.locals.app_version = version ?? '';
      next();
    });
    const middleware = await (0, _web.default)(config, auth, storage, _logger.logger);
    app.use(middleware);
  } else {
    app.get('/', function (_, __, next) {
      next(_utils.ErrorCode.getNotFound(_constants.API_ERROR.WEB_DISABLED));
    });
  }
  app.get('/*', function (_, __, next) {
    next(_utils.ErrorCode.getNotFound(_constants.API_ERROR.FILE_NOT_FOUND));
  });
  app.use((0, _middleware.handleError)(_logger.logger));
  app.use(_middleware.final);
  return app;
};
var _default = exports.default = async function _default(configHash) {
  const config = new _config2.default(_lodash.default.cloneDeep(configHash));
  const storage = new _storage.default(config);
  // waits until init calls have been initialized
  await storage.init(config);
  return await defineAPI(config, storage);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,