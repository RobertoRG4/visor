"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
var _debug = _interopRequireDefault(require("debug"));
var _lodash = _interopRequireDefault(require("lodash"));
var _core = require("@verdaccio/core");
var _middleware = require("@verdaccio/middleware");
var _constants = require("../../../lib/constants");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('verdaccio:api:stars');
function _default(route, storage) {
  route.get(_middleware.STARS_API_ENDPOINTS.get_user_starred_packages, (req, res, next) => {
    const query = req.query;
    if (typeof query?.key === 'undefined' || typeof query?.key !== 'string') {
      debug('missing query key username');
      return next(_core.errorUtils.getBadRequest('missing query key username'));
    }
    const key = query.key;
    debug(`get user starred packages for user: ${key}`);
    storage.getLocalDatabase((err, localPackages) => {
      if (err) {
        debug(`error getting local database: ${err.message}`);
        return next(err);
      }
      const filteredPackages = localPackages.filter(localPackage => {
        debug(`checking package: ${localPackage?.name}`);
        return _lodash.default.keys(localPackage[_constants.USERS]).includes(key.toString().replace(/['"]+/g, ''));
      });
      debug(`found ${filteredPackages.length} packages for user: ${key}`);
      res.status(_constants.HTTP_STATUS.OK);
      next({
        rows: filteredPackages.map(filteredPackage => ({
          value: filteredPackage.name
        }))
      });
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGVidWciLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9sb2Rhc2giLCJfY29yZSIsIl9taWRkbGV3YXJlIiwiX2NvbnN0YW50cyIsImUiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImRlYnVnIiwiY3JlYXRlRGVidWciLCJfZGVmYXVsdCIsInJvdXRlIiwic3RvcmFnZSIsImdldCIsIlNUQVJTX0FQSV9FTkRQT0lOVFMiLCJnZXRfdXNlcl9zdGFycmVkX3BhY2thZ2VzIiwicmVxIiwicmVzIiwibmV4dCIsInF1ZXJ5Iiwia2V5IiwiZXJyb3JVdGlscyIsImdldEJhZFJlcXVlc3QiLCJnZXRMb2NhbERhdGFiYXNlIiwiZXJyIiwibG9jYWxQYWNrYWdlcyIsIm1lc3NhZ2UiLCJmaWx0ZXJlZFBhY2thZ2VzIiwiZmlsdGVyIiwibG9jYWxQYWNrYWdlIiwibmFtZSIsIl8iLCJrZXlzIiwiVVNFUlMiLCJpbmNsdWRlcyIsInRvU3RyaW5nIiwicmVwbGFjZSIsImxlbmd0aCIsInN0YXR1cyIsIkhUVFBfU1RBVFVTIiwiT0siLCJyb3dzIiwibWFwIiwiZmlsdGVyZWRQYWNrYWdlIiwidmFsdWUiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL2VuZHBvaW50L2FwaS9zdGFycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgUmVzcG9uc2UsIFJvdXRlciB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgZXJyb3JVdGlscyB9IGZyb20gJ0B2ZXJkYWNjaW8vY29yZSc7XG5pbXBvcnQgeyBTVEFSU19BUElfRU5EUE9JTlRTIH0gZnJvbSAnQHZlcmRhY2Npby9taWRkbGV3YXJlJztcbmltcG9ydCB7IFZlcnNpb24gfSBmcm9tICdAdmVyZGFjY2lvL3R5cGVzJztcblxuaW1wb3J0IHsgSFRUUF9TVEFUVVMsIFVTRVJTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgU3RvcmFnZSBmcm9tICcuLi8uLi8uLi9saWIvc3RvcmFnZSc7XG5pbXBvcnQgeyAkTmV4dEZ1bmN0aW9uVmVyLCAkUmVxdWVzdEV4dGVuZCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzJztcblxuY29uc3QgZGVidWcgPSBjcmVhdGVEZWJ1ZygndmVyZGFjY2lvOmFwaTpzdGFycycpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocm91dGU6IFJvdXRlciwgc3RvcmFnZTogU3RvcmFnZSk6IHZvaWQge1xuICByb3V0ZS5nZXQoXG4gICAgU1RBUlNfQVBJX0VORFBPSU5UUy5nZXRfdXNlcl9zdGFycmVkX3BhY2thZ2VzLFxuICAgIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6IFJlc3BvbnNlLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IHJlcS5xdWVyeSBhcyB7IGtleT86IHN0cmluZyB9O1xuICAgICAgaWYgKHR5cGVvZiBxdWVyeT8ua2V5ID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgcXVlcnk/LmtleSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgZGVidWcoJ21pc3NpbmcgcXVlcnkga2V5IHVzZXJuYW1lJyk7XG4gICAgICAgIHJldHVybiBuZXh0KGVycm9yVXRpbHMuZ2V0QmFkUmVxdWVzdCgnbWlzc2luZyBxdWVyeSBrZXkgdXNlcm5hbWUnKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleSA9IHF1ZXJ5LmtleTtcbiAgICAgIGRlYnVnKGBnZXQgdXNlciBzdGFycmVkIHBhY2thZ2VzIGZvciB1c2VyOiAke2tleX1gKTtcblxuICAgICAgc3RvcmFnZS5nZXRMb2NhbERhdGFiYXNlKChlcnIsIGxvY2FsUGFja2FnZXM6IFZlcnNpb25bXSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgZGVidWcoYGVycm9yIGdldHRpbmcgbG9jYWwgZGF0YWJhc2U6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkUGFja2FnZXM6IFZlcnNpb25bXSA9IGxvY2FsUGFja2FnZXMuZmlsdGVyKChsb2NhbFBhY2thZ2U6IFZlcnNpb24pID0+IHtcbiAgICAgICAgICBkZWJ1ZyhgY2hlY2tpbmcgcGFja2FnZTogJHtsb2NhbFBhY2thZ2U/Lm5hbWV9YCk7XG4gICAgICAgICAgcmV0dXJuIF8ua2V5cyhsb2NhbFBhY2thZ2VbVVNFUlNdKS5pbmNsdWRlcyhrZXkudG9TdHJpbmcoKS5yZXBsYWNlKC9bJ1wiXSsvZywgJycpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZGVidWcoYGZvdW5kICR7ZmlsdGVyZWRQYWNrYWdlcy5sZW5ndGh9IHBhY2thZ2VzIGZvciB1c2VyOiAke2tleX1gKTtcbiAgICAgICAgcmVzLnN0YXR1cyhIVFRQX1NUQVRVUy5PSyk7XG4gICAgICAgIG5leHQoe1xuICAgICAgICAgIHJvd3M6IGZpbHRlcmVkUGFja2FnZXMubWFwKChmaWx0ZXJlZFBhY2thZ2U6IFZlcnNpb24pID0+ICh7XG4gICAgICAgICAgICB2YWx1ZTogZmlsdGVyZWRQYWNrYWdlLm5hbWUsXG4gICAgICAgICAgfSkpLFxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBQUEsTUFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsT0FBQSxHQUFBRixzQkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUUsS0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsV0FBQSxHQUFBSCxPQUFBO0FBR0EsSUFBQUksVUFBQSxHQUFBSixPQUFBO0FBQTRELFNBQUFELHVCQUFBTSxDQUFBLFdBQUFBLENBQUEsSUFBQUEsQ0FBQSxDQUFBQyxVQUFBLEdBQUFELENBQUEsS0FBQUUsT0FBQSxFQUFBRixDQUFBO0FBSTVELE1BQU1HLEtBQUssR0FBRyxJQUFBQyxjQUFXLEVBQUMscUJBQXFCLENBQUM7QUFFakMsU0FBQUMsU0FBVUMsS0FBYSxFQUFFQyxPQUFnQixFQUFRO0VBQzlERCxLQUFLLENBQUNFLEdBQUcsQ0FDUEMsK0JBQW1CLENBQUNDLHlCQUF5QixFQUM3QyxDQUFDQyxHQUFtQixFQUFFQyxHQUFhLEVBQUVDLElBQXNCLEtBQVc7SUFDcEUsTUFBTUMsS0FBSyxHQUFHSCxHQUFHLENBQUNHLEtBQXlCO0lBQzNDLElBQUksT0FBT0EsS0FBSyxFQUFFQyxHQUFHLEtBQUssV0FBVyxJQUFJLE9BQU9ELEtBQUssRUFBRUMsR0FBRyxLQUFLLFFBQVEsRUFBRTtNQUN2RVosS0FBSyxDQUFDLDRCQUE0QixDQUFDO01BQ25DLE9BQU9VLElBQUksQ0FBQ0csZ0JBQVUsQ0FBQ0MsYUFBYSxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDckU7SUFFQSxNQUFNRixHQUFHLEdBQUdELEtBQUssQ0FBQ0MsR0FBRztJQUNyQlosS0FBSyxDQUFDLHVDQUF1Q1ksR0FBRyxFQUFFLENBQUM7SUFFbkRSLE9BQU8sQ0FBQ1csZ0JBQWdCLENBQUMsQ0FBQ0MsR0FBRyxFQUFFQyxhQUF3QixLQUFLO01BQzFELElBQUlELEdBQUcsRUFBRTtRQUNQaEIsS0FBSyxDQUFDLGlDQUFpQ2dCLEdBQUcsQ0FBQ0UsT0FBTyxFQUFFLENBQUM7UUFDckQsT0FBT1IsSUFBSSxDQUFDTSxHQUFHLENBQUM7TUFDbEI7TUFFQSxNQUFNRyxnQkFBMkIsR0FBR0YsYUFBYSxDQUFDRyxNQUFNLENBQUVDLFlBQXFCLElBQUs7UUFDbEZyQixLQUFLLENBQUMscUJBQXFCcUIsWUFBWSxFQUFFQyxJQUFJLEVBQUUsQ0FBQztRQUNoRCxPQUFPQyxlQUFDLENBQUNDLElBQUksQ0FBQ0gsWUFBWSxDQUFDSSxnQkFBSyxDQUFDLENBQUMsQ0FBQ0MsUUFBUSxDQUFDZCxHQUFHLENBQUNlLFFBQVEsQ0FBQyxDQUFDLENBQUNDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7TUFDbkYsQ0FBQyxDQUFDO01BRUY1QixLQUFLLENBQUMsU0FBU21CLGdCQUFnQixDQUFDVSxNQUFNLHVCQUF1QmpCLEdBQUcsRUFBRSxDQUFDO01BQ25FSCxHQUFHLENBQUNxQixNQUFNLENBQUNDLHNCQUFXLENBQUNDLEVBQUUsQ0FBQztNQUMxQnRCLElBQUksQ0FBQztRQUNIdUIsSUFBSSxFQUFFZCxnQkFBZ0IsQ0FBQ2UsR0FBRyxDQUFFQyxlQUF3QixLQUFNO1VBQ3hEQyxLQUFLLEVBQUVELGVBQWUsQ0FBQ2I7UUFDekIsQ0FBQyxDQUFDO01BQ0osQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0VBQ0osQ0FDRixDQUFDO0FBQ0giLCJpZ25vcmVMaXN0IjpbXX0=