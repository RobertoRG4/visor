"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listenDefaultCallback = listenDefaultCallback;
exports.startVerdaccio = startVerdaccio;
var _console = require("console");
var _constants = _interopRequireDefault(require("constants"));
var _fs = _interopRequireDefault(require("fs"));
var _http = _interopRequireDefault(require("http"));
var _https = _interopRequireDefault(require("https"));
var _lodash = require("lodash");
var _url = _interopRequireDefault(require("url"));
var _config = require("@verdaccio/config");
var _index = _interopRequireDefault(require("../api/index"));
var _constants2 = require("./constants");
var _experiments = require("./experiments");
var _logger = require("./logger");
var _utils = require("./utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
/**
 * Trigger the server after configuration has been loaded.
 * @param {Object} config
 * @param {Object} cliArguments
 * @param {String} configPath
 * @param {String} pkgVersion
 * @param {String} pkgName
 * @deprecated use runServer instead
 */
function startVerdaccio(config, cliListen, configPath, pkgVersion, pkgName, callback) {
  if ((0, _lodash.isObject)(config) === false) {
    throw new Error(_constants2.API_ERROR.CONFIG_BAD_FORMAT);
  }
  (0, _utils.initLogger)(config);

  // merge flags and experiments for backward compatibility
  const flags = {
    ...(config?.flags || {}),
    ...(config?.experiments || {})
  };
  (0, _experiments.displayExperimentsInfoBox)(flags);
  _logger.logger.warn('This is a deprecated method, please use runServer instead');
  (0, _index.default)(config).then(app => {
    const listen = cliListen ?? config?.listen;
    const addr = (0, _config.getListenAddress)(listen, _logger.logger);
    let webServer;
    if (addr.proto === 'https') {
      webServer = handleHTTPS(app, configPath, config);
    } else {
      // http
      webServer = _http.default.createServer(app);
    }
    if (webServer && typeof config?.server?.keepAliveTimeout === 'number') {
      // library definition for node is not up to date (doesn't contain recent 8.0 changes)
      webServer.keepAliveTimeout = config.server.keepAliveTimeout * 1000;
    }
    unlinkAddressPath(addr);
    callback(webServer, addr, pkgName, pkgVersion);
  });
}
function unlinkAddressPath(addr) {
  if (addr.path && _fs.default.existsSync(addr.path)) {
    _fs.default.unlinkSync(addr.path);
  }
}
function handleHTTPS(app, configPath, config) {
  try {
    let httpsOptions = {
      secureOptions: _constants.default.SSL_OP_NO_SSLv2 | _constants.default.SSL_OP_NO_SSLv3 // disable insecure SSLv2 and SSLv3
    };
    const keyCertConfig = config.https;
    const pfxConfig = config.https;
    const missingKeyCert = !(keyCertConfig.key && keyCertConfig.cert);
    (0, _console.debug)('missingKeyCert', missingKeyCert);
    const missingPfx = !pfxConfig.pfx;
    (0, _console.debug)('missingPfx', missingPfx);
    if (missingKeyCert && missingPfx) {
      (0, _console.debug)('No HTTPS configuration found');
      (0, _utils.logHTTPSWarning)(configPath);
      throw new Error('No HTTPS configuration found');
    }
    (0, _console.debug)('HTTPS configuration found');
    if (pfxConfig.pfx) {
      (0, _console.debug)('Using PFX configuration');
      const {
        pfx,
        passphrase
      } = pfxConfig;
      httpsOptions = (0, _lodash.assign)(httpsOptions, {
        pfx: _fs.default.readFileSync(pfx),
        passphrase: passphrase || ''
      });
    } else {
      (0, _console.debug)('Using Key/Cert configuration');
      const {
        key,
        cert,
        ca
      } = keyCertConfig;
      httpsOptions = (0, _lodash.assign)(httpsOptions, {
        key: _fs.default.readFileSync(key),
        cert: _fs.default.readFileSync(cert),
        ...(ca && {
          ca: _fs.default.readFileSync(ca)
        })
      });
    }
    return _https.default.createServer(httpsOptions, app);
  } catch (err) {
    // catch errors related to certificate loading
    _logger.logger.fatal({
      err: err
    }, 'cannot create https server: @{err.message}');
    process.exit(2);
  }
}
/**
 *
 * @param webServer
 * @param addr
 * @param pkgName
 * @param pkgVersion
 * @deprecated use initServer instead
 */
function listenDefaultCallback(webServer, addr, pkgName, pkgVersion) {
  const server = webServer.listen(addr.port || addr.path, addr.host, () => {
    // send a message for tests
    if ((0, _lodash.isFunction)(process.send)) {
      process.send({
        verdaccio_started: true
      });
    }
  }).on('error', function (err) {
    _logger.logger.fatal({
      err: err
    }, 'cannot create http server: @{err.message}');
    process.exit(2);
  });
  function handleShutdownGracefully() {
    _logger.logger.fatal('received shutdown signal - closing server gracefully...');
    server.close(() => {
      _logger.logger.info('server closed.');
      process.exit(0);
    });
  }

  // handle shutdown signals nicely when environment says so
  if (process.env.VERDACCIO_HANDLE_KILL_SIGNALS === 'true') {
    process.on('SIGINT', handleShutdownGracefully);
    process.on('SIGTERM', handleShutdownGracefully);
    process.on('SIGHUP', handleShutdownGracefully);
  }
  _logger.logger.warn({
    addr: addr.path ? _url.default.format({
      protocol: 'unix',
      pathname: addr.path
    }) : _url.default.format({
      protocol: addr.proto,
      hostname: addr.host,
      port: addr.port,
      pathname: '/'
    }),
    version: pkgName + '/' + pkgVersion
  }, 'http address - @{addr} - @{version}');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,