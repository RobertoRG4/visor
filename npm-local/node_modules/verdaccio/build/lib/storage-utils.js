"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WHITELIST = void 0;
exports.checkPackageLocal = checkPackageLocal;
exports.checkPackageRemote = checkPackageRemote;
exports.cleanUpLinksRef = cleanUpLinksRef;
exports.cleanUpReadme = cleanUpReadme;
exports.convertAbbreviatedManifest = convertAbbreviatedManifest;
exports.generatePackageTemplate = generatePackageTemplate;
exports.generateRevision = generateRevision;
exports.getLatestReadme = getLatestReadme;
exports.hasInstallScript = hasInstallScript;
exports.isPublishablePackage = isPublishablePackage;
exports.mergeUplinkTimeIntoLocal = mergeUplinkTimeIntoLocal;
exports.normalizePackage = normalizePackage;
exports.prepareSearchPackage = prepareSearchPackage;
exports.publishPackage = publishPackage;
var _debug = _interopRequireDefault(require("debug"));
var _lodash = _interopRequireDefault(require("lodash"));
var _core = require("@verdaccio/core");
var _searchIndexer = require("@verdaccio/search-indexer");
var _utils = require("@verdaccio/utils");
var _constants = require("./constants");
var _logger = require("./logger");
var _utils2 = require("./utils");
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
const debug = (0, _debug.default)('verdaccio:storage-utils');
function generatePackageTemplate(name) {
  return {
    // standard things
    name,
    versions: {},
    time: {},
    [_constants.USERS]: {},
    [_constants.DIST_TAGS]: {},
    _uplinks: {},
    _distfiles: {},
    _attachments: {},
    _rev: ''
  };
}

/**
 * Normalize package properties, tags, revision id.
 * @param {Object} pkg package reference.
 */
function normalizePackage(pkg) {
  const pkgProperties = ['versions', 'dist-tags', '_distfiles', '_attachments', '_uplinks', 'time'];
  pkgProperties.forEach(key => {
    const pkgProp = pkg[key];
    if (_lodash.default.isNil(pkgProp) || (0, _utils2.isObject)(pkgProp) === false) {
      pkg[key] = {};
    }
  });
  if (_lodash.default.isString(pkg._rev) === false) {
    pkg._rev = _constants.STORAGE.DEFAULT_REVISION;
  }
  if (_lodash.default.isString(pkg._id) === false) {
    pkg._id = pkg.name;
  }

  // normalize dist-tags
  (0, _utils2.normalizeDistTags)(pkg);
  return pkg;
}
function generateRevision(rev) {
  const _rev = rev.split('-');
  return (+_rev[0] || 0) + 1 + '-' + (0, _utils.generateRandomHexString)();
}
function getLatestReadme(pkg) {
  const versions = pkg['versions'] || {};
  const distTags = pkg[_constants.DIST_TAGS] || {};
  // FIXME: here is a bit tricky add the types
  const latestVersion = distTags['latest'] ? versions[distTags['latest']] || {} : {};
  let readme = _lodash.default.trim(pkg.readme || latestVersion.readme || '');
  if (readme) {
    return readme;
  }

  // In case of empty readme - trying to get ANY readme in the following order: 'next','beta','alpha','test','dev','canary'
  const readmeDistTagsPriority = ['next', 'beta', 'alpha', 'test', 'dev', 'canary'];
  readmeDistTagsPriority.map(function (tag) {
    if (readme) {
      return readme;
    }
    const version = distTags[tag] ? versions[distTags[tag]] || {} : {};
    readme = _lodash.default.trim(version.readme || readme);
  });
  return readme;
}
function cleanUpReadme(version) {
  if (_lodash.default.isNil(version) === false) {
    // @ts-ignore
    delete version.readme;
  }
  return version;
}
const WHITELIST = exports.WHITELIST = ['_rev', 'name', 'versions', 'dist-tags', 'readme', 'time', '_id', 'users'];
function cleanUpLinksRef(keepUpLinkData, result) {
  const propertyToKeep = [...WHITELIST];
  if (keepUpLinkData === true) {
    propertyToKeep.push('_uplinks');
  }
  for (const i in result) {
    if (propertyToKeep.indexOf(i) === -1) {
      // Remove sections like '_uplinks' from response
      delete result[i];
    }
  }
  return result;
}

/**
 * Check whether a package it is already a local package
 * @param {*} name
 * @param {*} localStorage
 */
function checkPackageLocal(name, localStorage) {
  return new Promise((resolve, reject) => {
    localStorage.getPackageMetadata(name, (err, results) => {
      if (!_lodash.default.isNil(err) && err.status !== _constants.HTTP_STATUS.NOT_FOUND) {
        return reject(err);
      }
      if (results) {
        return reject(_utils2.ErrorCode.getConflict(_constants.API_ERROR.PACKAGE_EXIST));
      }
      return resolve();
    });
  });
}
function publishPackage(name, metadata, localStorage) {
  return new Promise((resolve, reject) => {
    localStorage.addPackage(name, metadata, (err, latest) => {
      if (!_lodash.default.isNull(err)) {
        return reject(err);
      } else if (!_lodash.default.isUndefined(latest)) {
        _searchIndexer.SearchMemoryIndexer.add(latest).catch(reason => {
          debug('indexer has failed on add item %o', reason);
          _logger.logger.error('indexer has failed on add item');
        });
      }
      return resolve();
    });
  });
}
function checkPackageRemote(name, isAllowPublishOffline, syncMetadata) {
  return new Promise((resolve, reject) => {
    syncMetadata(name, null, {}, (err, packageJsonLocal, upLinksErrors) => {
      // something weird
      if (err && err.status !== _constants.HTTP_STATUS.NOT_FOUND) {
        return reject(err);
      }

      // checking package exist already
      if (_lodash.default.isNil(packageJsonLocal) === false) {
        return reject(_utils2.ErrorCode.getConflict(_constants.API_ERROR.PACKAGE_EXIST));
      }
      for (let errorItem = 0; errorItem < upLinksErrors.length; errorItem++) {
        // checking error
        // if uplink fails with a status other than 404, we report failure
        if (_lodash.default.isNil(upLinksErrors[errorItem][0]) === false) {
          if (upLinksErrors[errorItem][0].status !== _constants.HTTP_STATUS.NOT_FOUND) {
            if (isAllowPublishOffline) {
              return resolve();
            }
            return reject(_utils2.ErrorCode.getServiceUnavailable(_constants.API_ERROR.UPLINK_OFFLINE_PUBLISH));
          }
        }
      }
      return resolve();
    });
  });
}

// tested on v6
function mergeUplinkTimeIntoLocal(cacheManifest, remoteManifest) {
  if ('time' in remoteManifest) {
    // remote override cache time conflicts
    return {
      ...cacheManifest,
      time: {
        ...cacheManifest.time,
        ...remoteManifest.time
      }
    };
  }
  return cacheManifest;
}
function prepareSearchPackage(data, time) {
  const latest = _core.pkgUtils.getLatest(data);
  if (latest && data.versions[latest]) {
    const version = data.versions[latest];
    const versions = {
      [latest]: 'latest'
    };
    const pkg = {
      name: version.name,
      description: version.description,
      [_constants.DIST_TAGS]: {
        latest
      },
      maintainers: version.maintainers || [version.author].filter(Boolean),
      author: version.author,
      repository: version.repository,
      readmeFilename: version.readmeFilename || '',
      homepage: version.homepage,
      keywords: version.keywords,
      time: {
        modified: time
      },
      bugs: version.bugs,
      license: version.license,
      versions
    };
    return pkg;
  }
}

/**
 * Check whether the package metadta has enough data to be published
 * @param pkg metadata
 */
function isPublishablePackage(pkg) {
  const keys = Object.keys(pkg);
  return keys.includes('versions');
}
function hasInstallScript(version) {
  if (version?.scripts) {
    const scripts = Object.keys(version.scripts);
    return scripts.find(item => {
      return ['install', 'preinstall', 'postinstall'].includes(item);
    }) !== undefined;
  }
  return false;
}
function convertAbbreviatedManifest(manifest) {
  const abbreviatedVersions = Object.keys(manifest.versions).reduce((acc, version) => {
    const _version = manifest.versions[version];
    // This should be align with this document
    // https://github.com/npm/registry/blob/master/docs/responses/package-metadata.md#abbreviated-version-object
    const _version_abbreviated = {
      name: _version.name,
      version: _version.version,
      description: _version.description,
      deprecated: _version.deprecated,
      bin: _version.bin,
      dist: _version.dist,
      engines: _version.engines,
      cpu: _version.cpu,
      os: _version.os,
      funding: _version.funding,
      directories: _version.directories,
      dependencies: _version.dependencies,
      devDependencies: _version.devDependencies,
      peerDependencies: _version.peerDependencies,
      peerDependenciesMeta: _version.peerDependenciesMeta,
      optionalDependencies: _version.optionalDependencies,
      bundleDependencies: _version.bundleDependencies,
      // npm cli specifics
      _hasShrinkwrap: _version._hasShrinkwrap,
      hasInstallScript: hasInstallScript(_version)
    };
    acc[version] = _version_abbreviated;
    return acc;
  }, {});
  const convertedManifest = {
    name: manifest['name'],
    [_constants.DIST_TAGS]: manifest[_constants.DIST_TAGS],
    versions: abbreviatedVersions,
    // @ts-ignore
    modified: manifest?.time?.modified,
    // NOTE: special case for pnpm https://github.com/pnpm/rfcs/pull/2
    time: manifest?.time
  };

  // @ts-ignore
  return convertedManifest;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,