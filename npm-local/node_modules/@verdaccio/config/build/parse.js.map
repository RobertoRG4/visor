{"version":3,"file":"parse.js","names":["_debug","_interopRequireDefault","require","_jsYaml","_lodash","_nodeFs","_nodePath","_core","_configPath","_configUtils","e","__esModule","default","debug","buildDebug","parseConfigFile","configPath","fileExists","Error","test","yamlConfig","YAML","load","fs","readFileSync","strict","Object","assign","config_path","jsonConfig","code","message","APP_ERROR","CONFIG_NOT_VALID","fromJStoYAML","config","isObject","dump","getConfigParsed","configurationParsed","undefined","configPathLocation","findConfigFile","self_path","path","resolve","API_ERROR","CONFIG_BAD_FORMAT"],"sources":["../src/parse.ts"],"sourcesContent":["import buildDebug from 'debug';\nimport YAML from 'js-yaml';\nimport { isObject } from 'lodash';\nimport fs from 'node:fs';\nimport path from 'node:path';\n\nimport { API_ERROR, APP_ERROR } from '@verdaccio/core';\nimport { ConfigYaml } from '@verdaccio/types';\n\nimport { findConfigFile } from './config-path';\nimport { fileExists } from './config-utils';\n\nconst debug = buildDebug('verdaccio:config:parse');\n\n/**\n * Parse a config file from yaml to JSON.\n * @param configPath the absolute path of the configuration file\n */\nexport function parseConfigFile(configPath: string): ConfigYaml & {\n  // @deprecated use configPath instead\n  config_path: string;\n  configPath: string;\n} {\n  debug('parse config file %s', configPath);\n  if (!fileExists(configPath)) {\n    throw new Error(`config file does not exist or not reachable`);\n  }\n  debug('parsing config file: %o', configPath);\n  try {\n    if (/\\.ya?ml$/i.test(configPath)) {\n      const yamlConfig = YAML.load(fs.readFileSync(configPath, 'utf8'), {\n        strict: false,\n      }) as ConfigYaml;\n\n      return Object.assign({}, yamlConfig, {\n        configPath,\n        // @deprecated use configPath instead\n        config_path: configPath,\n      });\n    }\n\n    const jsonConfig = require(configPath) as ConfigYaml;\n    return Object.assign({}, jsonConfig, {\n      configPath,\n      // @deprecated use configPath instead\n      config_path: configPath,\n    });\n  } catch (e: any) {\n    if (e.code !== 'MODULE_NOT_FOUND') {\n      debug('config module not found %o error: %o', configPath, e.message);\n      throw Error(APP_ERROR.CONFIG_NOT_VALID);\n    }\n\n    throw e;\n  }\n}\n\nexport function fromJStoYAML(config: Partial<ConfigYaml>): string | null {\n  debug('convert config from JSON to YAML');\n  if (isObject(config)) {\n    return YAML.dump(config);\n  } else {\n    throw new Error(`config is not a valid object`);\n  }\n}\n\n/**\n * Parses and returns a configuration object of type `ConfigYaml`.\n *\n * If a string or `undefined` is provided, it is interpreted as a path to a config file\n * (or uses a default location). The config file is then loaded and parsed.\n * If an object is provided, it is assumed to be a pre-parsed configuration.\n * Backward compability: ensures the returned configuration object has a `self_path` property set,\n * either to the config file path or to a property within the object.\n *\n * @param {string | ConfigYaml} [config] - Optional. A path to the configuration file (string),\n *                                         a pre-parsed config object, or `undefined`.\n * @returns {ConfigYaml} The parsed configuration object with a guaranteed `self_path` property.\n * @throws {Error} If the provided config is neither a string, undefined, nor an object.\n */\nexport function getConfigParsed(config?: string | ConfigYaml): ConfigYaml {\n  debug('getConfigParsed called with config: %o', typeof config);\n  let configurationParsed: ConfigYaml;\n  if (config === undefined || typeof config === 'string') {\n    debug('using default configuration');\n    const configPathLocation = findConfigFile(config);\n    configurationParsed = parseConfigFile(configPathLocation);\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    if (!configurationParsed.self_path) {\n      debug('self_path not defined, using config path location');\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      configurationParsed.self_path = path.resolve(configPathLocation);\n    }\n  } else if (typeof config === 'object' && config !== null) {\n    configurationParsed = config;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    if (!configurationParsed.self_path) {\n      debug('self_path not defined, using config path location');\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-expect-error\n      configurationParsed.self_path = configurationParsed.configPath;\n    }\n  } else {\n    throw new Error(API_ERROR.CONFIG_BAD_FORMAT);\n  }\n  return configurationParsed;\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,OAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AACA,IAAAG,OAAA,GAAAJ,sBAAA,CAAAC,OAAA;AACA,IAAAI,SAAA,GAAAL,sBAAA,CAAAC,OAAA;AAEA,IAAAK,KAAA,GAAAL,OAAA;AAGA,IAAAM,WAAA,GAAAN,OAAA;AACA,IAAAO,YAAA,GAAAP,OAAA;AAA4C,SAAAD,uBAAAS,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAE5C,MAAMG,KAAK,GAAG,IAAAC,cAAU,EAAC,wBAAwB,CAAC;;AAElD;AACA;AACA;AACA;AACO,SAASC,eAAeA,CAACC,UAAkB,EAIhD;EACAH,KAAK,CAAC,sBAAsB,EAAEG,UAAU,CAAC;EACzC,IAAI,CAAC,IAAAC,uBAAU,EAACD,UAAU,CAAC,EAAE;IAC3B,MAAM,IAAIE,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACAL,KAAK,CAAC,yBAAyB,EAAEG,UAAU,CAAC;EAC5C,IAAI;IACF,IAAI,WAAW,CAACG,IAAI,CAACH,UAAU,CAAC,EAAE;MAChC,MAAMI,UAAU,GAAGC,eAAI,CAACC,IAAI,CAACC,eAAE,CAACC,YAAY,CAACR,UAAU,EAAE,MAAM,CAAC,EAAE;QAChES,MAAM,EAAE;MACV,CAAC,CAAe;MAEhB,OAAOC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEP,UAAU,EAAE;QACnCJ,UAAU;QACV;QACAY,WAAW,EAAEZ;MACf,CAAC,CAAC;IACJ;IAEA,MAAMa,UAAU,GAAG3B,OAAO,CAACc,UAAU,CAAe;IACpD,OAAOU,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEE,UAAU,EAAE;MACnCb,UAAU;MACV;MACAY,WAAW,EAAEZ;IACf,CAAC,CAAC;EACJ,CAAC,CAAC,OAAON,CAAM,EAAE;IACf,IAAIA,CAAC,CAACoB,IAAI,KAAK,kBAAkB,EAAE;MACjCjB,KAAK,CAAC,sCAAsC,EAAEG,UAAU,EAAEN,CAAC,CAACqB,OAAO,CAAC;MACpE,MAAMb,KAAK,CAACc,eAAS,CAACC,gBAAgB,CAAC;IACzC;IAEA,MAAMvB,CAAC;EACT;AACF;AAEO,SAASwB,YAAYA,CAACC,MAA2B,EAAiB;EACvEtB,KAAK,CAAC,kCAAkC,CAAC;EACzC,IAAI,IAAAuB,gBAAQ,EAACD,MAAM,CAAC,EAAE;IACpB,OAAOd,eAAI,CAACgB,IAAI,CAACF,MAAM,CAAC;EAC1B,CAAC,MAAM;IACL,MAAM,IAAIjB,KAAK,CAAC,8BAA8B,CAAC;EACjD;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASoB,eAAeA,CAACH,MAA4B,EAAc;EACxEtB,KAAK,CAAC,wCAAwC,EAAE,OAAOsB,MAAM,CAAC;EAC9D,IAAII,mBAA+B;EACnC,IAAIJ,MAAM,KAAKK,SAAS,IAAI,OAAOL,MAAM,KAAK,QAAQ,EAAE;IACtDtB,KAAK,CAAC,6BAA6B,CAAC;IACpC,MAAM4B,kBAAkB,GAAG,IAAAC,0BAAc,EAACP,MAAM,CAAC;IACjDI,mBAAmB,GAAGxB,eAAe,CAAC0B,kBAAkB,CAAC;IACzD;IACA;IACA,IAAI,CAACF,mBAAmB,CAACI,SAAS,EAAE;MAClC9B,KAAK,CAAC,mDAAmD,CAAC;MAC1D;MACA;MACA0B,mBAAmB,CAACI,SAAS,GAAGC,iBAAI,CAACC,OAAO,CAACJ,kBAAkB,CAAC;IAClE;EACF,CAAC,MAAM,IAAI,OAAON,MAAM,KAAK,QAAQ,IAAIA,MAAM,KAAK,IAAI,EAAE;IACxDI,mBAAmB,GAAGJ,MAAM;IAC5B;IACA;IACA,IAAI,CAACI,mBAAmB,CAACI,SAAS,EAAE;MAClC9B,KAAK,CAAC,mDAAmD,CAAC;MAC1D;MACA;MACA0B,mBAAmB,CAACI,SAAS,GAAGJ,mBAAmB,CAACvB,UAAU;IAChE;EACF,CAAC,MAAM;IACL,MAAM,IAAIE,KAAK,CAAC4B,eAAS,CAACC,iBAAiB,CAAC;EAC9C;EACA,OAAOR,mBAAmB;AAC5B","ignoreList":[]}