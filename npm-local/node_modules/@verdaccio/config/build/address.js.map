{"version":3,"file":"address.js","names":["_debug","_interopRequireDefault","require","_core","e","__esModule","default","debug","createDebug","parseAddress","urlAddress","urlPattern","exec","proto","DEFAULT_PROTOCOL","host","DEFAULT_DOMAIN","port","DEFAULT_PORT","unixPattern","path","addrToString","a","getListenAddress","listen","logger","Array","isArray","filteredListen","filter","item","length","Error","invalid","valid","raw","candidate","push","forEach","bad","warn","addr","firstValid","single"],"sources":["../src/address.ts"],"sourcesContent":["import createDebug from 'debug';\n\nimport { DEFAULT_DOMAIN, DEFAULT_PORT, DEFAULT_PROTOCOL } from '@verdaccio/core';\nimport { ListenAddress as ConfigListenAddress, Logger } from '@verdaccio/types';\n\nconst debug = createDebug('verdaccio:config:address');\n\nexport interface ListenAddress {\n  proto: string;\n  host?: string;\n  port?: string;\n  path?: string;\n}\n\n/**\n * Parse an internet address\n * Allow:\n - https:localhost:1234        - protocol + host + port\n - localhost:1234              - host + port\n - 1234                        - port\n - http::1234                  - protocol + port\n - https://localhost:443/      - full url + https\n - http://[::1]:443/           - ipv6\n - unix:/tmp/http.sock         - unix sockets\n - https://unix:/tmp/http.sock - unix sockets (https)\n * @param {*} urlAddress the internet address definition\n * @return {Object|Null} literal object that represent the address parsed\n */\nexport function parseAddress(urlAddress: string): ListenAddress | null {\n  //\n  // TODO: refactor it to something more reasonable?\n  //\n  //        protocol :  //      (  host  )|(    ipv6     ):  port  /\n  const urlPattern = /^((https?):(\\/\\/)?)?((([^\\/:]*)|\\[([^\\[\\]]+)\\]):)?(\\d+)\\/?$/.exec(urlAddress);\n\n  if (urlPattern) {\n    return {\n      proto: urlPattern[2] || DEFAULT_PROTOCOL,\n      host: urlPattern[6] || urlPattern[7] || DEFAULT_DOMAIN,\n      port: urlPattern[8] || DEFAULT_PORT,\n    };\n  }\n\n  const unixPattern = /^(?:(https?):\\/\\/)?unix:(\\/.*)$/.exec(urlAddress);\n  if (!unixPattern) {\n    // if we cannot match the unix pattern, we return null\n    // this is to avoid returning a wrong object\n    return null;\n  }\n\n  return {\n    host: unixPattern[2],\n    proto: unixPattern[1] || 'unix',\n    path: unixPattern[2],\n  };\n}\n\nfunction addrToString(a: ListenAddress): string {\n  return a.proto === 'unix' ? `unix:${a.host}` : `${a.proto}://${a.host}:${a.port}`;\n}\n\n/**\n * Retrieve all addresses defined in the config file.\n * Verdaccio is able to listen multiple ports\n * @param {String} argListen\n * @param {String} configListen\n * eg:\n *  listen:\n - localhost:5555\n - localhost:5557\n @return {Array}\n */\nexport function getListenAddress(\n  listen: ConfigListenAddress | string | undefined,\n  logger: Logger\n): ListenAddress {\n  debug('getListenAddress called with %o', listen);\n\n  if (!listen) {\n    debug('No listen address provided, using default');\n    return { proto: DEFAULT_PROTOCOL, host: DEFAULT_DOMAIN, port: DEFAULT_PORT };\n  }\n\n  if (Array.isArray(listen)) {\n    const filteredListen = listen.filter((item) => typeof item === 'string');\n\n    if (filteredListen.length === 0) {\n      throw new Error('Listen addresses array cannot be empty');\n    }\n\n    const invalid: string[] = [];\n    const valid: ListenAddress[] = [];\n\n    for (const raw of filteredListen) {\n      const candidate = parseAddress(raw as string);\n      if (candidate) {\n        debug('valid listen address found: %o', candidate);\n        valid.push(candidate);\n      } else {\n        debug('invalid address found: %o', raw);\n        invalid.push(raw as string);\n      }\n    }\n\n    invalid.forEach((bad) =>\n      logger.warn(\n        { addr: bad },\n        'invalid address - @{addr}, we expect a port (e.g. \"4873\"), ' +\n          'host:port (e.g. \"localhost:4873\"), full url ' +\n          '(e.g. \"http://localhost:4873/\") or unix:/path/socket'\n      )\n    );\n\n    if (valid.length === 0) {\n      throw new Error('No valid listen addresses found in configuration array');\n    }\n\n    const firstValid = valid[0];\n\n    if (listen.length > 1) {\n      logger.warn(\n        `Multiple listen addresses are not supported, using the first valid one ${addrToString(\n          firstValid\n        )}`\n      );\n    }\n\n    return firstValid;\n  }\n\n  const single = parseAddress(listen as string);\n  if (!single) {\n    throw new Error(\n      `Invalid address - ${listen}, we expect a port (e.g. \"4873\"), ` +\n        `host:port (e.g. \"localhost:4873\"), full url ` +\n        `(e.g. \"http://localhost:4873/\") or unix:/path/socket`\n    );\n  }\n  return single;\n}\n"],"mappings":"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","ignoreList":[]}